#!/bin/bash

# Copyright 2017 Symphony Talent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function show_help() {
  echo "\
Usage: $(basename "$0") ([OPTION] [-TAG_NAME] [TAG_VALUE])*

Find EC2 instances by tag values and show concise, human-readable output.
Instances are matched if they contain all the given tags and values. Tag values
can be a partial match. If no tag name is specified then 'Name' tag is used. If
no value is specified for a tag then any value will be matched.

AWS CLI and JQ are required. AWS CLI default profile or environment
variables can be used to set AWS credentials. For help with AWS CLI, see
http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html.

Options:

  --state STATE   Filter instance by state name. State name may be a partial
                  match. EC2 state names are: pending, running, shutting-down,
                  terminated, stopping, stopped.

  --no-color      Suppress colorized output.

  -H              Suppress column headers.
  --no-headers

  -I              Only output instance IP addresses (implies -H).
  --ip-only

  -h              Show help.
  --help
"
}

color_enabled() {
  [[ "$use_color" == "yes" ]] && which tput > /dev/null
}

function red() {
  color_enabled && tput setaf 1
}

function green() {
  color_enabled && tput setaf 2
}

function bold() {
  color_enabled && tput bold
}

function reset() {
  color_enabled && tput sgr0
}

function describe_instances_cmd() {
  printf "%s" "aws ec2 describe-instances --filters "
  for ((i=1; i<=tag_count; i++)); do
    printf '"Name=tag:%s,Values=*%s*" ' "${tag_names[i]}" "${tag_values[i]}"
  done
  if [[ "$required_state" != "" ]]; then
    printf '"Name=instance-state-name,Values=*%s*" ' "${required_state}"
  fi
}

function get_instances() {
  eval "$(describe_instances_cmd)"
}

function instance_tags_jq_filter() {
  echo '{'
  for tag_name in "${tag_names[@]}"; do
    echo "\"$tag_name\": ((.Tags[] | select(.Key == \"$tag_name\")) // {}) | .Value,"
  done
  echo '}'
}

function instance_jq_filter() {
  echo "{
      tags: $(instance_tags_jq_filter),
      id: .InstanceId,
      ip: .PrivateIpAddress,
      name: ((.Tags[] | select(.Key == \"Name\")) // {}) | .Value,
      type: .InstanceType,
      state: .State.Name
    }"
}

function tag_width() {
  echo "$instances_json" | jq -r "
    [\"$1\"] +
    [
      .Reservations[] | .Instances[] |
      (.Tags[] | select(.Key == \"$1\")) // {} |
      .Value
    ] |
    map(length) |
    max"
}

function set_tag_widths() {
  for ((i=1; i<=tag_count; i++)); do
    tag_widths[$i]="$(tag_width "${tag_names[i]}")"
  done
}

function normalize_json() {
  jq -c "[.Reservations[] | .Instances[]]
    | map($(instance_jq_filter))
    | sort_by(.name)[]"
}

state_color() {
  case "$1" in
    running)
      echo -n "$(green)"
    ;;
    stopped)
      echo -n "$(red)"
    ;;
  esac
}

function get_format_string() {
  printf "%s" "%-8s %-11s %-20s %-15s %-$(tag_width Name)s"
  for ((i=1; i<=tag_count; i++)); do
    [[ "${tag_names[i]}" != "Name" ]] && printf "%s" "  %-${tag_widths[i]}s"
  done
}

function print_line() {
  if [[ "$ip_only" == "yes" ]]; then
    print_ip_line "$1"
  elif [[ "$id_only" == "yes" ]]; then
    print_id_line "$1"
  else
    print_full_line "$1"
  fi
}

function print_ip_line() {
  echo "$1" | jq -r .ip
}

function print_id_line() {
  echo "$1" | jq -r .id
}

function print_full_line() {
  local state
  local tags=()
  state="$(echo "$1" | jq -r .state)"
  for tag_name in "${tag_names[@]}"; do
    [[ "$tag_name" != "Name" ]] && tags+=("$(echo "$1" | jq -r ".tags.\"$tag_name\"")")
  done
  printf "%s" "$(state_color "$state")"
  # shellcheck disable=SC2059
  printf "${format_string}" \
    "${state}" \
    "$(echo "$1" | jq -r .type)" \
    "$(echo "$1" | jq -r .id)" \
    "$(echo "$1" | jq -r .ip)" \
    "$(echo "$1" | jq -r .name)" \
    "${tags[@]}"
  printf "%s\n" "$(reset)"
}

function print_header_line() {
  local headers=("State" "Type" "Id" "Private IP" "Name")
  for tag_name in "${tag_names[@]}"; do
    [[ "$tag_name" != "Name" ]] && headers+=("${tag_name}")
  done
  # shellcheck disable=SC2059
  printf "$(bold)${format_string}$(reset)\n" "${headers[@]}"
}

function print_output() {
  [[ "$use_headers" == "no" ]] || print_header_line
  while read json; do
    print_line "$json"
  done
}

tag_names=()
tag_values=()
tag_widths=()
tag_count=0
use_color="yes"

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      show_help
      exit
    ;;
    --no-color)
      use_color="no"
    ;;
    -I|--ip-only)
      ip_only="yes"
      use_headers="no"
    ;;
    -i|--ids-only)
      id_only="yes"
      use_headers="no"
    ;;
    -H|--no-headers)
      use_headers="no"
    ;;
    --state)
      shift
      required_state="$1"
    ;;
    -*)
      tag_count=$((tag_count + 1))
      tag_names[$tag_count]="${1#-}"
    ;;
    *)
      tag_values[$tag_count]="$1"
    ;;
  esac
  shift
done

if [[ "$tag_count" == "0" || "${tag_values[0]}" != "" ]]; then
  tag_count=$((tag_count + 1))
  tag_names[$tag_count]="Name"
  tag_values[tag_count]="${tag_values[0]}"
fi

instances_json=$(get_instances)
set_tag_widths
format_string=$(get_format_string)
echo "${instances_json}" | normalize_json | print_output
